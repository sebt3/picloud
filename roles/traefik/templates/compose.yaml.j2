version: '3.5'

services:
  traefik:
    image: {{ traefik_image }}
    command: |-
      --api
      --api.insecure
      --entryPoints.web.address=:80
{% if domain_use_tls==1 %}
      --entryPoints.websecure.address=:443
      --certificatesresolvers.le.acme.email={{ email }}
      --certificatesresolvers.le.acme.httpchallenge=true
      --certificatesresolvers.le.acme.httpchallenge.entrypoint=web
      --certificatesresolvers.le.acme.storage=/acme/acme.json
{% endif %}
      --providers.docker.endpoint="unix:///var/run/docker.sock"
      --providers.docker.swarmMode=true
      --providers.docker.network=public
      --providers.docker.exposedbydefault=false
    networks:
      - public
    volumes:
      - acme:/acme
      - logs:/var/log/access.log
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - target: 80
        published: 80
        mode: host
      - target: 443
        published: 443
        mode: host
{% if domain_wildcard==1 and export_traefik==1 %}
    deploy:
      labels:
        - traefik.enable=true
        - traefik.http.middlewares.compress.compress=true
        - traefik.http.routers.{{ stack }}.rule=Host(`traefik.{{ domain }}`)
        - traefik.http.services.{{ stack }}.loadbalancer.server.port=8080
{% if domain_use_tls==1 %}
        - traefik.http.routers.{{ stack }}.tls=true
        - traefik.http.routers.{{ stack }}.tls.certresolver=le
        - traefik.http.routers.{{ stack }}.entrypoints=websecure
        - traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https
        - traefik.http.routers.redirect-{{ stack }}.rule=Host(`{{ domain }}`)
        - traefik.http.routers.redirect-{{ stack }}.middlewares=redirect-to-https
        - traefik.http.routers.redirect-{{ stack }}.entrypoints=web
{% else %}
        - traefik.http.routers.{{ stack }}.entrypoints=web
{% endif %}
{% else %}
      - target: 8080
        published: 8080
    deploy:
{% endif %}
      placement:
        constraints:
          - node.role == manager
{% if domain_use_tls==1 %}
  traefik-certs:
    image: {{ traefik_cert_image }}
    environment:
      - ACME_PATH=/acme
      - CERT_PATH=/certs
    volumes:
      - acme:/acme
      - certs:/certs
    networks:
      - public
    deploy:
      placement:
        constraints:
          - node.role == manager
{% endif %}

volumes:
  acme:
  logs:
  certs:

networks:
  public:
    external: true
